services:
  neo4j:
    image: neo4j:5.13-community
    container_name: query-benchmark-neo4j
    ports:
      - "7474:7474"  # Browser
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/benchmark123
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./neo4j/import:/var/lib/neo4j/import
    networks:
      - benchmark-network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p benchmark123 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: query-benchmark-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/data:/usr/share/elasticsearch/data/benchmark
    networks:
      - benchmark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ..
      dockerfile: docker/backend.Dockerfile
    container_name: query-benchmark-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=benchmark123
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=benchmark-data
      - CORS_ORIGIN=http://localhost:5173
    depends_on:
      neo4j:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - benchmark-network
    command: node apps/backend/dist/main.js
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/query || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ..
      dockerfile: docker/frontend.Dockerfile
    container_name: query-benchmark-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000/api
      - VITE_WS_URL=ws://localhost:3000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - benchmark-network
    command: npx nx serve frontend --host 0.0.0.0

  # Optional: Redis for future scaling
  redis:
    image: redis:7-alpine
    container_name: query-benchmark-redis
    ports:
      - "6379:6379"
    networks:
      - benchmark-network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  neo4j_data:
  neo4j_logs:
  elasticsearch_data:
  redis_data:

networks:
  benchmark-network:
    driver: bridge 